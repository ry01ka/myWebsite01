{
  "name": "csscomb",
  "description": "CSS coding style formatter",
  "version": "2.0.1",
  "homepage": "http://csscomb.com/",
  "author": {
    "name": "Mikhail Troshev",
    "email": "mishanga@yandex-team.ru"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/csscomb/csscomb.js"
  },
  "maintainers": [
    {
      "name": "Mikhail Troshev",
      "email": "mishanga@yandex-team.ru",
      "url": "http://mishanga.pro/"
    },
    {
      "name": "Tony Ganch",
      "email": "tonyganch+github@gmail.com",
      "url": "http://tonyganch.com/"
    },
    {
      "name": "Slava Oliyanchuk",
      "email": "miripiruni@gmail.com",
      "url": "http://miripiruni.org/"
    }
  ],
  "contributors": [
    {
      "name": "Sergey Puzankov",
      "email": "puzankov@yandex-team.ru"
    },
    {
      "name": "Denis Payase",
      "email": "lostsoul@yandex-team.ru"
    },
    {
      "name": "Igor Novak",
      "email": "bezengi@gmail.com"
    },
    {
      "name": "Roman Komarov",
      "email": "kizmarh@ya.ru"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "commander": "2.0.0",
    "gonzales-pe": "2.0.1",
    "minimatch": "0.2.12",
    "vow": "0.3.11",
    "vow-fs": "0.2.3"
  },
  "devDependencies": {
    "jshint-groups": "0.5.3",
    "jshint": "2.3.0",
    "jscs": "1.0.11",
    "mocha": "1.14.0"
  },
  "main": "./lib/csscomb.js",
  "bin": {
    "csscomb": "./bin/csscomb"
  },
  "scripts": {
    "test": "./node_modules/.bin/jshint-groups && ./node_modules/.bin/jscs . && ./node_modules/.bin/mocha -u bdd -R dot"
  },
  "readme": "# CSSComb [![CSSComb](logo.png)](http://csscomb.com/)\n[![Build Status](https://secure.travis-ci.org/csscomb/csscomb.js.png?branch=master)](http://travis-ci.org/csscomb/csscomb.js)\n\nCSSComb is a coding style formatter for CSS.\nYou can easily write your own [configuration](#configuration) to make your style sheets beautiful and consistent.\n\nThe main feature is [sorting properties](#sort-order) in a specific order.\nIt was inspired by [@miripiruni](https://github.com/miripiruni)'s [PHP-based tool](https://github.com/csscomb/csscomb) of the same name.\nThis is the new JavaScript version, based on the powerful CSS parser [Gonzales PE](https://github.com/tonyganch/gonzales-pe).\n\n## Installation\n\nGlobal installation (for use as a command-line tool):\n\n```bash\nnpm install csscomb -g\n```\n\nLocal installation (for use as a command-line tool within current directory):\n\n```bash\nnpm install csscomb\n```\n\nTo install as a project dependency (the package will appear in your dependencies):\n\n```bash\nnpm install csscomb --save\n```\n\nTo install as a dev dependency (the package will appear in your devDependencies):\n\n```bash\nnpm install csscomb --save-dev\n```\n\n## Command Line usage\n\nTo run `csscomb`:\n\n```bash\ncsscomb path[ path[...]]\n```\n\nIf you installed the package locally, in the project's directory run:\n\n```bash\n./node_modules/.bin/csscomb path[ path[...]]\n```\n\nIf you run `csscomb -h`, it will show some helpful information:\n\n```bash\ncsscomb -h\n\n  Usage: csscomb [options] <file ...>\n\n  Options:\n\n    -h, --help           output usage information\n    -V, --version        output the version number\n    -v, --verbose        verbose mode\n    -c, --config [path]  configuration file path\n    -d, --detect         detect mode (would return detected options)\n    -l, --lint           in case some fixes needed returns an error\n```\n\n## Node.js module usage\n\nBesides being a great CLI, `csscomb` can be used in Node.js projects (inside\na plugin or as a dev tool):\n\n```js\n// Require:\nvar Comb = require('csscomb');\n\n// Configure:\nvar comb = new Comb();\ncomb.configure(config);\n\n// Use:\ncomb.processPath('style.css');\n```\n\n### configure(config)\n\nYou must configure csscomb before use. The config must be valid JSON.    \nSee [configuration section](#configuration) for more information.\n\n### processPath(path)\n\nComb a file or a directory.    \nWarning: This method rewrites the file.\n\n```js\n// One file:\ncomb.processPath('main.scss');\n\n// Whole directory:\ncomb.processPath('assets/styles');\n```\n\n### processDirectory(path)\n\nComb all supported files in a directory.    \nWarning: This method rewrites the files.\n\n```js\ncomb.processDirectory('public/css');\n```\n\n### processFile(path)\n\nComb one file.    \nIf file's syntax is not supported, the file will be ignored.    \nWarning: This method rewrites the file.\n\n```js\ncomb.processFile('print.less');\n```\n\n### processString(text, syntax, filename)\n\nComb a stylesheet.    \nIf syntax is not `css`, you should pass a `syntax` parameter, too.    \n`filename` is optional. It is used to print errors.\n\n```js\n// Comb a css string:\nvar css = 'a {top: 0; left: 0}';\nvar combedCSS = comb.processString(css);\n\n// Comb a less string:\nvar less = '@color: tomato; a {color: @color}';\nvar combedLESS = comb.processString(less, 'less');\n```\n\n## Configuration\n\n### Through `.csscomb.json`\n\n`csscomb` is configured using the file [.csscomb.json](https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json), located in the project root.\n\nExample configuration:\n```json\n{\n    \"exclude\": [\"node_modules/**\"],\n    \"verbose\": true,\n\n    \"always-semicolon\": true,\n    \"block-indent\": \"    \",\n    \"colon-space\": [\"\", \" \"],\n    \"color-case\": \"lower\",\n    \"color-shorthand\": true,\n    \"element-case\": \"lower\",\n    \"eof-newline\": true,\n    \"leading-zero\": false,\n    \"quotes\": \"single\",\n    \"remove-empty-rulesets\": true,\n    \"rule-indent\": \"    \",\n    \"stick-brace\": \"\\n\",\n    \"strip-spaces\": true,\n    \"unitless-zero\": true,\n    \"vendor-prefix-align\": true\n}\n```\n\n**Note**: you can also use a [predefined config file](https://github.com/csscomb/csscomb.js/tree/master/config)\n```bash\ncp ./node_modules/csscomb/config/csscomb.json .csscomb.json\n```\n\n### Through `.css`-template\n\nInstead of configuring all the options one by one, you can use a CSS-template file: CSSComb.js will detect the coding style and use it as a config. All existing properties except `sort-order` can be configured this way.\n\nTo provide a template just add `\"template\"` with the path to the template in the `.csscomb.json`:\n\n```json\n{\n    \"template\": \"example.css\"\n}\n```\n\nCSSComb.js will only create rules based on the examples given, so if your template doesn't provide examples of usage for some of the options, or if you want to override an example, you can write them in the `.csscomb.json` after the `\"template\"`:\n\n```json\n{\n    \"template\": \"example.css\",\n    \"leading-zero\": false,\n    \"vendor-prefix-align\": true\n}\n```\n\nThis config would detect all the options from the `example.css`, and use `\"leading-zero\":  false` instead of anything detected, and `\"vendor-prefix-align\": true` even if there were no prefixed properties or values inside the `example.css`.\n\n### Creating `.csscomb.json` from the `.css` file\n\nIf you want to configure everything manually, but based on the coding style of an existing `.css`-file, you can first detect all the options using `--detect` CLI option, and then add/edit any options you like. So if you have `example.css`:\n\n```css\n.foo\n{\n    width: #fff;\n}\n```\n\nrunning\n\n```bash\ncsscomb -d template.css > .csscomb.json\n```\n\nwould generate this `.csscomb.json`:\n\n```json\n{\n    \"remove-empty-rulesets\": true,\n    \"always-semicolon\": true,\n    \"color-case\": \"lower\",\n    \"color-shorthand\": true,\n    \"strip-spaces\": true,\n    \"eof-newline\": true,\n    \"stick-brace\": \"\\n\",\n    \"colon-space\": [\n        \"\",\n        \" \"\n    ],\n    \"rule-indent\": \"    \"\n}\n```\n\n## Options\n\n### exclude\n\nAvailable values: `{String[]}`\n\nArray of [Ant path patterns](http://ant.apache.org/manual/dirtasks.html#patterns) to exclude.\n\nExample: `{ \"exclude\": [\"node_modules/**\"] }` - exclude all files and directories under `node_modules` dir.\n\n### verbose\n\nAvailable value: `{Boolean}` `true`\n\nConfig mode: `{ \"verbose\": true }`\n```bash\ncsscomb ./test\n\n✓ test/integral.origin.css\n  test/integral.expect.css\n\n2 files processed\n1 file fixed\n96 ms spent\n```\n\nCLI mode:\n```bash\ncsscomb --verbose ./test\ncsscomb -v ./test\n```\n\n### template\n\n**Note:** see the description of the [configuring with templates](#through-css-template).\n\nAvailable value: `{String}` path to the `.css` file.\n\nExample: `{ \"template\": \"example.css\" }`\n\nCLI mode — just provide the path to the `.css` file instead of `.csscomb.json`:\n```bash\ncsscomb --config example.css ./test\ncsscomb -c example.css ./test\n```\n\n### always-semicolon\n\nWhether to add a semicolon after the last value/mixin.\n\nAvailable value: `{Boolean}` `true`\n\nExample: `{ \"always-semicolon\": true }`\n\n```css\n/* before */\na { color: red }\n\n/* after */\na { color: red; }\n```\n\nExample: `{ \"always-semicolon\": true }` (scss file):\n\n```scss\n// before\ndiv {\n    color: tomato;\n    @include nani\n    }\n\n// after\ndiv {\n    color: tomato;\n    @include nani;\n    }\n```\n\nNote that in `*.scss` and `*.less` files semicolons are not added after `}`\neven if it's part of a value:\n\n```scss\n// before\ndiv {\n    color: tomato;\n    font: {\n        family: fantasy;\n        size: 16px\n        }\n    }\n\n// after\ndiv {\n    color: tomato;\n    font: {\n        family: fantasy;\n        size: 16px;\n        }\n    }\n```\n\n### block-indent\n\n**Note**: better to use with [rule-indent](#rule-indent)\n\nAcceptable values:\n  * `{Number}` of spaces;\n  * `{String}` of whitespaces or tabs. If there is any other character in the\n    string, the value will not be set.\n\nExample: `{ \"block-indent\": 2 }`\n\n```css\n/* before */\n  a { color: red }\n  @media all { a { color: green } }\n\n/* after */\na { color: red\n}\n@media all {\n  a { color: green\n  }\n}\n```\n\nExample: `{ \"block-indent\": \"  \" }`\n\n```css\n/* before */\n  a { color: red }\n  @media all { a { color: green } }\n\n/* after */\na { color: red\n}\n@media all {\n  a { color: green\n  }\n}\n```\n\n\n### colon-space\n\nAcceptable values are of the form `{Array}` with 2 elements of the following types:\n  * `{Number}` of spaces;\n  * `{String}` of whitespaces or tabs. If there is any other character in the\n    string, the value will not be set.\n\nThe first element of the array sets spaces before colon, and the second one sets\nspaces after colon.\n\nExample: `{ \"colon-space\": [\"\\t\", \"\\t\"] }`\n\n```css\n/* before */\na { color: red }\n\n/* after */\na { color\t:\tred }\n```\n\nExample: `{ \"colon-space\": [0, 1] }`\n\n```css\n/* before */\na { color:red }\n\n/* after */\na { color: red }\n```\n\n\n### color-case\n\nAvailable values: `{String}` `lower` or `upper`\n\nExample: `{ \"color-case\": \"lower\" }`\n\n```css\n/* before */\na { color: #FFF }\n\n/* after */\na { color: #fff }\n```\n\n### color-shorthand\n\nAvailable values: `{Boolean}` `true` or `false`\n\nExample: `{ \"color-shorthand\": true }`\n\n```css\n/* before */\nb { color: #ffcc00 }\n\n/* after */\nb { color: #fc0 }\n```\n\n### combinator-space\n\nAcceptable value is `{Array}` with 2 elements of the following types:\n  * `{Number}` of spaces;\n  * `{String}` of whitespaces, tabs or new lines. If there is any other\n    character in the string, the value will not be set.\n\nThe first element of the array sets spaces before combinator, and the second\none sets spaces after combinator.\n\nExample: `{ \"combinator-space\": [\" \", \"\\n\"] }`\n\n```css\n/* before */\na>b { color: red }\n\n/* after */\na >\nb { color: red }\n```\n\nExample: `{ \"combinator-space\": [1, 1] }`\n\n```css\n/* before */\na>b { color: red }\n\n/* after */\na > b { color: red }\n```\n\n\n### element-case\n\nAcceptable values: `{String}` `lower` or `upper`\n\nExample: `{ \"element-case\": \"upper\" }`\n\n```css\n/* before */\nli > a { color: red }\n\n/* after */\nLI > A { color: red }\n```\n\n### eof-newline\n\nAcceptable values: `{Boolean}` `true` or `false`\n\nExample: `{ \"eof-newline\": true }`\n\n`a { color: red }` &rarr; `a { color: red }\\n`\n\nExample: `{ \"eof-newline\": false }`\n\n`a { color: red }\\n` &rarr; `a { color: red }`\n\n### leading-zero\n\nAcceptable values: `{Boolean}` `true` or `false`\n\nExample: `{ \"leading-zero\": false }`\n\n```css\n/* before */\np { padding: 0.5em }\n\n/* after */\np { padding: .5em }\n```\n\n### quotes\n\nAcceptable values: `{String}` `single` or `double`\n\nExample: `{ \"quotes\": \"single\" }`\n\n```css\n/* before */\np[href^=\"https://\"]:before { content: \"secure\" }\n\n/* after */\np[href^='https://']:before { content: 'secure' }\n```\n\n### remove-empty-rulesets\n\nAcceptable values: `{Boolean}` `true`\n\nExample: `{ \"remove-empty-rulesets\": true }` - remove rulesets that have nothing but spaces.\n\n`a { color: red; } p { /* hey */ } b { }` &rarr; `a { color: red; } p { /* hey */ } `\n\n### rule-indent\n\n**Note**: better to use with [block-indent](#block-indent)\n\nAcceptable values:\n  * `{Number}` of spaces;\n  * `{String}` of whitespaces or tabs. If there is any other character in the\n    string, the value will not be set.\n\nExample: `{ \"rule-indent\": 2 }`\n\n```css\n/* before */\na { color:red; margin:0 }\n\n/* after */\na {\n  color:red;\n  margin:0 }\n```\n\nExample: `{ \"rule-indent\": \"  \" }`\n\n```css\n/* before */\na { color:red; margin:0 }\n\n/* after */\na {\n  color:red;\n  margin:0 }\n```\n\n\n### sort-order\n\n**Note**: you can use an example of [.csscomb.json](https://github.com/csscomb/csscomb.js/blob/master/.csscomb.json) to set your own sort order\n\nAvailable values:\n  * `{Array}` of rules\n  * `{Array}` of arrays of rules for groups separation\n\nExample: `{ \"sort-order\": [ \"margin\", \"padding\" ] }`\n\n```css\n/* before */\np {\n    padding: 0;\n    margin: 0;\n}\n\n/* after */\np {\n    margin: 0;\n    padding: 0;\n}\n```\n\nExample: `{ \"sort-order\": [ [ \"margin\", \"padding\" ], [ \"border\", \"background\" ] ] }`\n\n```css\n/* before */\np {\n    background: none;\n    border: 0;\n    margin: 0;\n    padding: 0;\n}\n\n/* after */\np {\n    margin: 0;\n    padding: 0;\n\n    border: 0;\n    background: none;\n}\n```\n\nIf you sort properties in `*.scss` or `*.less` files, you can use one of 3\nkeywords in your config:\n  * `$variable` for variable declarations (e.g. `$var` in Sass or `@var` in LESS);\n  * `$include` for included mixins (e.g. `@include ...` and `@extend ...` in Sass\n    or `.mixin()` in LESS);\n  * `$import` for `@import` rules.\n\nExample: `{ \"sort-order\": [ [ \"$variable\" ], [ \"$include\" ], [ \"top\", \"padding\" ] ] }`\n\n```scss\n/* before */\np {\n    padding: 0;\n    @include mixin($color);\n    $color: tomato;\n    top: 0;\n}\n\n/* after */\np {\n    $color: tomato;\n\n    @include mixin($color);\n\n    top: 0;\n    padding: 0;\n}\n```\n\n### stick-brace\n\nAcceptable values:\n  * `{Number}` of spaces;\n  * `{String}` of whitespaces, tabs or newlines. If there is any other\n    character in the string, the value will not be set.\n\nExample: `{ \"stick-brace\": \"\\n\" }`\n\n```css\n/* before */\na { color:red }\n\n/* after */\na\n{ color:red }\n```\n\nExample: `{ \"stick-brace\": 1 }`\n\n```css\n/* before */\na{ color:red }\n\n/* after */\na { color:red }\n```\n\n\n### strip-spaces\n\nAcceptable value: `{Boolean}` `true`\n\nExample: `{ \"strip-spaces\": true }`\n\n`a { color: red } \\n \\n \\n` &rarr; `a { color: red }\\n`\n\n`a { color: red }\\t` &rarr; `a { color: red }`\n\n### unitless-zero\n\nAcceptable value: `{Boolean}` `true`\n\nExample: `{ \"unitless-zero\": true }`\n\n```css\n/* before */\nimg { border: 0px }\n\n/* after */\nimg { border: 0 }\n```\n\n### vendor-prefix-align\n\nAcceptable value: `{Boolean}` `true`\n\nExample: `{ \"vendor-prefix-align\": true }`\n\n```css\n/* before */\na\n{\n    -webkit-border-radius: 3px;\n    -moz-border-radius: 3px;\n    border-radius: 3px;\n    background: -webkit-linear-gradient(top, #fff 0, #eee 100%);\n    background: -moz-linear-gradient(top, #fff 0, #eee 100%);\n    background: linear-gradient(to bottom, #fff 0, #eee 100%);\n}\n\n/* after */\na\n{\n    -webkit-border-radius: 3px;\n       -moz-border-radius: 3px;\n            border-radius: 3px;\n    background: -webkit-linear-gradient(top, #fff 0, #eee 100%);\n    background:    -moz-linear-gradient(top, #fff 0, #eee 100%);\n    background:         linear-gradient(to bottom, #fff 0, #eee 100%);\n}\n```\n\n## Tests\n\nRun `npm test` for tests.\n\n## Contributing\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTE.md).\n\n## Authors\n\n[@mishanga](https://github.com/mishanga),\n[@tonyganch](https://github.com/tonyganch)\n\nThanks for assistance and contributions:\n\n[@miripiruni](https://github.com/miripiruni),\n[@puzankov](https://github.com/puzankov),\n[@L0stSoul](https://github.com/L0stSoul),\n[@ignovak](https://github.com/ignovak),\n[@kizu](https://github.com/kizu),\n[@anton-rudeshko](https://github.com/anton-rudeshko),\n[@mishaberezin](https://github.com/mishaberezin)\n\n## License\n\nThis software is released under the terms of the [MIT license](https://github.com/csscomb/csscomb.js/blob/master/LICENSE).\n\n## Other projects\n* https://github.com/senchalabs/cssbeautify\n* https://github.com/css/gonzales\n* https://github.com/tonyganch/gonzales-pe\n* https://github.com/css/csso\n* https://github.com/nzakas/parser-lib\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/csscomb/csscomb.js/issues"
  },
  "_id": "csscomb@2.0.1",
  "_from": "csscomb@~2.0.0"
}
