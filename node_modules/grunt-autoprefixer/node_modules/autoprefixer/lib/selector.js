(function() {
  var Prefixer, Selector, utils, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Prefixer = require('./prefixer');

  utils = require('./utils');

  Selector = (function(_super) {
    __extends(Selector, _super);

    function Selector() {
      _ref = Selector.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Selector.prototype.check = function(rule) {
      return rule.selector.indexOf(this.name) !== -1;
    };

    Selector.prototype.prefixed = function(prefix) {
      return this.name.replace(/^([^\w]*)/, '$1' + prefix);
    };

    Selector.prototype.regexp = function() {
      return this.regexpCache || (this.regexpCache = new RegExp(utils.escapeRegexp(this.name), 'gi'));
    };

    Selector.prototype.replace = function(selector, prefix) {
      return selector.replace(this.regexp(), this.prefixed(prefix));
    };

    Selector.prototype.add = function(rule, prefix) {
      var cloned, prefixed;
      prefixed = this.replace(rule.selector, prefix);
      if (rule.parent.some(function(i) {
        return i.selector === prefixed;
      })) {
        return;
      }
      cloned = this.clone(rule, {
        selector: prefixed
      });
      return rule.parent.insertBefore(rule, cloned);
    };

    return Selector;

  })(Prefixer);

  module.exports = Selector;

}).call(this);
